#If you want create a new branch:
$ git branch <name_of_your_new_branch>

#Create branch on locale and switch
$ git checkout -b [name_of_your_new_branch]

#Change g branch :
$ git checkout [name_of_your_new_branch]

#Push BRANCHb :
$ git push origin [name_of_your_new_branch]

#ALL BRANCH:
$ git branch


#Add a new remote forr branch :
$ git remote add [name_of_your_remote] [name_of_your_new_branch]

#Push changes from your commit into your branch :
$ git push [name_of_your_new_remote] [url]


#Update your branch when the original branch from official repository has been updated :
$ git fetch [name_of_your_remote]


#Then you need to apply to merge changes, if your branch is derivated from #develop you need to do :

$ git merge [name_of_your_remote]/develop

#Delete a branch on your local filesystem :
$ git branch -d [name_of_your_new_branch]

#To force the deletion of local branch on your filesystem :
$ git branch -D [name_of_your_new_branch]

#Delete the branch on github :
$ git push origin :[name_of_your_new_branch]


#The only difference is the : to say delete, you can do it too by using github #interface to remove branch : https://help.github.com/articles/deleting-unused-#branches.

#If you want to change default branch, it's so easy with github, in your fork go #into Admin and in the drop-down list default branch choose what you want.



# add  Git ignore
nano git .gitnore

# How to make Git “forget” about a file that was tracked but is now in .gitignore 

git rm --cached <file>

# for Folder
git rm -r --cached path_to_your_folder/


#reset  
git reset --hard <hash_of_the_commit>
git reset --soft HEAD@{1}
git commit -m "Reverting to the state of the project at <hash_of_the_commit>"
